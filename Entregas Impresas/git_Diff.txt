diff --git a/README.md b/README.md
index 33caa53..d639dc6 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,9 @@
-# TP_Sisop
\ No newline at end of file
+# TP_Sisop
+
+75.08 Sistemas Operativos
+
+Primer Cuatrimestre 2017
+
+de Trincheria, Camila Florencia
+
+González Pérez, Ailén Yamila
diff --git a/TP1.md b/TP1.md
index 4b64f1f..c6c149b 100644
--- a/TP1.md
+++ b/TP1.md
@@ -3,19 +3,91 @@ TP1: Memoria virtual en JOS
 
 page2pa
 -------
+Definición de la función:
 
-...
+static inline physaddr_t
+page2pa(struct PageInfo *pp)
+{
+	return (pp - pages) << PGSHIFT;
+}
 
+Donde:
+pp apunta a la información de la página (el struct)
+pages apunta al array que contiene el estado de cada página física
+PGSHIFT = 12 (definición en mmu.h)
+
+Lo que hace la función es, a partir de un puntero a PageInfo, obtener la dirección física de la página a la que se refiere. A ese puntero (pp) le resta la dirección de inicio del arreglo de physical pages. Se obtiene a partir de esa resta el número de la página física asociada al struct PageInfo apuntado por pp y se shiftea para obtener la dirección de esa página física. 
+Hacer el shift de 12 bits es equivalente a multiplicar el número de página por 4096, que corresponde al tamaño de cada página en bytes.
 
 boot_alloc_pos
 --------------
+a. Como al inicializar nextfree lo que hace la función es un ROUNDUP entre end y PGSIZE, en donde end apunta al final del segmento .bss del kernel, podemos calcular la dirección en la cual termina ese segmento mediante el comando:
+
+$ readelf -S kernel
+
+Encabezados de Sección:
+  [Nr] Nombre            Tipo            Direc    Desp   Tam    ES Opt En Inf Al
+  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
+  [ 1] .text             PROGBITS        f0100000 001000 001f81 00  AX  0   0 16
+  [ 2] .rodata           PROGBITS        f0101fa0 002fa0 0009d4 00   A  0   0 32
+  [ 3] .stab             PROGBITS        f0102974 003974 0048e5 0c   A  4   0  4
+  [ 4] .stabstr          STRTAB          f0107259 008259 001e54 00   A  0   0  1
+  [ 5] .data             PROGBITS        f010a000 00b000 00a300 00  WA  0   0 4096
+  [ 6] .bss              NOBITS          f0114300 015300 000650 00  WA  0   0 32
+  [ 7] .comment          PROGBITS        00000000 015300 000034 01  MS  0   0  1
+  [ 8] .shstrtab         STRTAB          00000000 0160a4 00004c 00      0   0  1
+  [ 9] .symtab           SYMTAB          00000000 015334 0008c0 10     10  70  4
+  [10] .strtab           STRTAB          00000000 015bf4 0004b0 00      0   0  1
+
+
+La sección .bss comienza en 0xf0114300 y tiene un tamaño de 0x000650. La suma entre estos valores corresponde a la dirección en donde termina el segmento: 0xf0114950. Ésta será la dirección apuntada por end. 
+Como el valor obtenido no es múltiplo de 4096, lo que haremos es encontrar el menor valor posible que sea mayor a 0xf0114950 y a su vez, múltiplo de 4096. El valor buscado es 0xf0115000, que será la primera dirección de memoria que devolverá boot_alloc.
+
+b. 
+$ make gdbgdb -q -s obj/kern/kernel -ex 'target remote 127.0.0.1:26000' -n -x .gdbinit
+Leyendo símbolos desde obj/kern/kernel...hecho.
+Remote debugging using 127.0.0.1:26000
+0x0000fff0 in ?? ()
+(gdb) b boot_alloc
+Punto de interrupción 1 at 0xf0100ae6: file kern/pmap.c, line 86.
+(gdb) c
+Continuando.
+Se asume que la arquitectura objetivo es i386
+=> 0xf0100ae6 <boot_alloc>:	mov    %eax,%edx
+
+Breakpoint 1, boot_alloc (n=<unknown type>) at kern/pmap.c:86
+86	{
+(gdb) print nextfree
+$1 = 0x0
+(gdb) print (char *) &end
+$7 = 0xf0114950 "\022"
+(gdb) b 97
+Punto de interrupción 2 at 0xf0100af1: file kern/pmap.c, line 97.
+(gdb) c
+Continuando.
+=> 0xf0100af1 <boot_alloc+11>:	mov    $0xf011594f,%eax
+
+Breakpoint 2, boot_alloc (n=<unknown type>) at kern/pmap.c:97
+97			nextfree = ROUNDUP((char *) end, PGSIZE);
+(gdb) next
+=> 0xf0100b00 <boot_alloc+26>:	mov    0xf0114538,%eax
+105		result = nextfree;
+(gdb) print nextfree
+$4 = 0xf0115000 ""
 
-...
 
 
 page_alloc
 ----------
+Definición de page2kva en pmap.h:
+
+	static inline void* page2kva(struct PageInfo *pp) {
+		return KADDR(page2pa(pp));
+	}
+
+La función page2pa devuelve la dirección física (physical address) de la página asociada al struct PageInfo apuntado por el parámetro.
+Con page2kva se obtiene la dirección virtual (virtual address) de la página física cuya información se guarda en el struct PageInfo *pp. Para ello utiliza la macro KADDR(pa), que toma una dirección física (obtenida mediante page2pa en la función mostrada) y devuelve su dirección virtual del kernel. 
+Esa es la principal diferencia entre las funciones.
 
-...
 
 
diff --git a/__pycache__/gradelib.cpython-35.pyc b/__pycache__/gradelib.cpython-35.pyc
new file mode 100644
index 0000000..4d21911
Binary files /dev/null and b/__pycache__/gradelib.cpython-35.pyc differ
diff --git a/grade-lab2 b/grade-lab2
old mode 100644
new mode 100755
index f8e2441..3f6a2b8
--- a/grade-lab2
+++ b/grade-lab2
@@ -1,6 +1,7 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 
 from gradelib import *
+from subprocess import Popen
 
 r = Runner(save("jos.out"),
            stop_breakpoint("readline"))
@@ -25,4 +26,12 @@ def test_check_kern_pgdir():
 def test_check_page_installed_pgdir():
     r.match(r"check_page_installed_pgdir\(\) succeeded!")
 
+@test(1, "Large pages", parent=test_jos)
+def test_check_pse():
+    if Popen(["grep", "-qE", "^ *# *ifn?def +TP1_PSE", "kern/pmap.c"]).wait():
+        raise NotImplementedError
+    r.run_qemu(make_args=["LABDEFS=-DTP1_PSE"])
+    r.match(r"check_kern_pgdir_pse\(\) succeeded!")
+    r.match(r"check_page_installed_pgdir\(\) succeeded!")
+
 run_tests()
diff --git a/gradelib.py b/gradelib.py
index 4bb6bed..152a361 100644
--- a/gradelib.py
+++ b/gradelib.py
@@ -32,6 +32,7 @@ def test(points, title=None, parent=None):
 
         def run_test():
             global TOTAL, POSSIBLE, CURRENT_TEST
+            nonlocal points
 
             # Handle test dependencies
             if run_test.complete:
@@ -42,6 +43,7 @@ def test(points, title=None, parent=None):
 
             # Run the test
             fail = None
+            not_fail = None
             start = time.time()
             CURRENT_TEST = run_test
             sys.stdout.write("%s: " % title)
@@ -50,12 +52,17 @@ def test(points, title=None, parent=None):
                 fn()
             except AssertionError as e:
                 fail = "".join(traceback.format_exception_only(type(e), e))
+            except NotImplementedError:
+                not_fail = ("yellow", "SKIPPED")
+                points = 0
+            else:
+                not_fail = ("green", "OK")
 
             # Display and handle test result
             POSSIBLE += points
-            if points:
+            if points or not_fail:
                 print("%s" % \
-                    (color("red", "FAIL") if fail else color("green", "OK")), end=' ')
+                    (color("red", "FAIL") if fail else color(*not_fail)), end=' ')
             if time.time() - start > 0.1:
                 print("(%.1fs)" % (time.time() - start), end=' ')
             print()
@@ -224,7 +231,8 @@ def maybe_unlink(*paths):
             if e.errno != errno.ENOENT:
                 raise
 
-COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m"}
+COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m",
+          "yellow": "\033[33m"}
 
 def color(name, text):
     if options.color == "always" or (options.color == "auto" and os.isatty(1)):
@@ -545,3 +553,4 @@ def stop_on_line(regexp):
     def stop(line):
         raise TerminateTest
     return call_on_line(regexp, stop)
+
diff --git a/kern/entry.S b/kern/entry.S
index 9550bbb..5ea5193 100644
--- a/kern/entry.S
+++ b/kern/entry.S
@@ -56,11 +56,17 @@ entry:
 	# is defined in entrypgdir.c.
 	movl	$(RELOC(entry_pgdir)), %eax
 	movl	%eax, %cr3
+	
+	# Enable PSE (4MiB pages)
+	movl	%cr4, %eax
+	orl 	$(CR4_PSE), %eax
+	movl	%eax, %cr4
+	
 	# Turn on paging.
 	movl	%cr0, %eax
 	orl	$(CR0_PE|CR0_PG|CR0_WP), %eax
 	movl	%eax, %cr0
-
+	
 	# Now paging is enabled, but we're still running at a low EIP
 	# (why is this okay?).  Jump up above KERNBASE before entering
 	# C code.
diff --git a/kern/entrypgdir.c b/kern/entrypgdir.c
index 4f324d1..221b312 100644
--- a/kern/entrypgdir.c
+++ b/kern/entrypgdir.c
@@ -3,6 +3,7 @@
 
 pte_t entry_pgtable[NPTENTRIES];
 
+
 // The entry.S page directory maps the first 4MB of physical memory
 // starting at virtual address KERNBASE (that is, it maps virtual
 // addresses [KERNBASE, KERNBASE+4MB) to physical addresses [0, 4MB)).
@@ -21,12 +22,13 @@ __attribute__((__aligned__(PGSIZE)))
 pde_t entry_pgdir[NPDENTRIES] = {
 	// Map VA's [0, 4MB) to PA's [0, 4MB)
 	[0]
-		= ((uintptr_t)entry_pgtable - KERNBASE) + PTE_P,
+		= 0x000000 + PTE_P + PTE_PS,
 	// Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)
 	[KERNBASE>>PDXSHIFT]
-		= ((uintptr_t)entry_pgtable - KERNBASE) + PTE_P + PTE_W
+		= 0x000000 + PTE_P + PTE_W + PTE_PS
 };
 
+#if 0  // entry_pgtable no longer needed.
 // Entry 0 of the page table maps to physical page 0, entry 1 to
 // physical page 1, etc.
 __attribute__((__aligned__(PGSIZE)))
@@ -1056,4 +1058,4 @@ pte_t entry_pgtable[NPTENTRIES] = {
 	0x3fe000 | PTE_P | PTE_W,
 	0x3ff000 | PTE_P | PTE_W,
 };
-
+#endif
diff --git a/kern/pmap.c b/kern/pmap.c
index 7e7fb08..c0f3d91 100644
--- a/kern/pmap.c
+++ b/kern/pmap.c
@@ -102,8 +102,19 @@ boot_alloc(uint32_t n)
 	// to a multiple of PGSIZE.
 	//
 	// LAB 2: Your code here.
+	result = nextfree;
+	
+	if (n > 0) {
+		
+		nextfree += ROUNDUP(n, PGSIZE);	
+		
+		if ((uintptr_t)nextfree >= (npages*PGSIZE+KERNBASE)){
+			panic("boot_alloc: out of memory\n");
+		}
+	}
 
-	return NULL;
+	return result;
+	
 }
 
 // Set up a two-level page table:
@@ -125,7 +136,7 @@ mem_init(void)
 	i386_detect_memory();
 
 	// Remove this line when you're ready to test this function.
-	panic("mem_init: This function is not finished\n");
+	//panic("mem_init: This function is not finished\n");
 
 	//////////////////////////////////////////////////////////////////////
 	// create initial page directory.
@@ -145,17 +156,20 @@ mem_init(void)
 	// Allocate an array of npages 'struct PageInfo's and store it in 'pages'.
 	// The kernel uses this array to keep track of physical pages: for
 	// each physical page, there is a corresponding struct PageInfo in this
-	// array.  'npages' is the number of physical pages in memory.  Use memset
-	// to initialize all fields of each struct PageInfo to 0.
+	// array.  'npages' is the number of physical pages in memory.  
+	//Use memset to initialize all fields of each struct PageInfo to 0.
 	// Your code goes here:
 
-
+	
+	pages = (struct PageInfo *) boot_alloc(npages*sizeof(struct PageInfo));
+	memset(pages, 0, sizeof(struct PageInfo)*npages);
 	//////////////////////////////////////////////////////////////////////
 	// Now that we've allocated the initial kernel data structures, we set
 	// up the list of free physical pages. Once we've done so, all further
 	// memory management will go through the page_* functions. In
 	// particular, we can now map memory using boot_map_region
 	// or page_insert
+	
 	page_init();
 
 	check_page_free_list(1);
@@ -172,7 +186,9 @@ mem_init(void)
 	//      (ie. perm = PTE_U | PTE_P)
 	//    - pages itself -- kernel RW, user NONE
 	// Your code goes here:
-
+	
+	boot_map_region(kern_pgdir, UPAGES, PTSIZE, PADDR(pages), PTE_U);
+	
 	//////////////////////////////////////////////////////////////////////
 	// Use the physical memory that 'bootstack' refers to as the kernel
 	// stack.  The kernel stack grows down from virtual address KSTACKTOP.
@@ -185,6 +201,8 @@ mem_init(void)
 	//     Permissions: kernel RW, user NONE
 	// Your code goes here:
 
+	boot_map_region(kern_pgdir, KSTACKTOP-KSTKSIZE, KSTKSIZE, PADDR(bootstack), PTE_W);
+	
 	//////////////////////////////////////////////////////////////////////
 	// Map all of physical memory at KERNBASE.
 	// Ie.  the VA range [KERNBASE, 2^32) should map to
@@ -194,6 +212,8 @@ mem_init(void)
 	// Permissions: kernel RW, user NONE
 	// Your code goes here:
 
+	boot_map_region(kern_pgdir, KERNBASE, -KERNBASE, 0, PTE_W);
+
 	// Check that the initial page directory has been set up correctly.
 	check_kern_pgdir();
 
@@ -252,11 +272,25 @@ page_init(void)
 	// NB: DO NOT actually touch the physical memory corresponding to
 	// free pages!
 	size_t i;
-	for (i = 0; i < npages; i++) {
+	for (i = 1; i < npages_basemem; i++) { // 1) i = 1 because 0 in use (so not add)
+		// 2)		
 		pages[i].pp_ref = 0;
 		pages[i].pp_link = page_free_list;
 		page_free_list = &pages[i];
 	}
+	
+	//3) IO not allocated
+	
+	//4) after boot alloc
+	
+	i = PGNUM(PADDR(boot_alloc(0)));  //Find
+	
+	for(;i<npages;i++){
+		pages[i].pp_ref = 0;
+		pages[i].pp_link = page_free_list;
+		page_free_list = &pages[i];			
+	}
+	
 }
 
 //
@@ -274,8 +308,24 @@ page_init(void)
 struct PageInfo *
 page_alloc(int alloc_flags)
 {
-	// Fill this function in
-	return 0;
+	struct PageInfo *result = page_free_list;
+
+	// There is not free page
+	if (!result)
+		return NULL;
+
+	// Remove from page_free_list.
+	// Assign next page
+	page_free_list = result->pp_link;
+	result -> pp_link = NULL;
+	
+	if (alloc_flags & ALLOC_ZERO) {
+		char *kva = page2kva(result);
+		memset(kva, '\0', PGSIZE);
+	}
+
+	
+	return result;
 }
 
 //
@@ -288,12 +338,22 @@ page_free(struct PageInfo *pp)
 	// Fill this function in
 	// Hint: You may want to panic if pp->pp_ref is nonzero or
 	// pp->pp_link is not NULL.
+
+	if (pp->pp_ref != 0 || pp->pp_link != NULL){
+		panic("page_free: could not free page!");        
+	}
+	//the freed page is linked to the first one in
+	// page_free_list and now it points to the freed one
+
+	pp->pp_link = page_free_list;
+	page_free_list = pp;
 }
 
 //
 // Decrement the reference count on a page,
 // freeing it if there are no more refs.
 //
+
 void
 page_decref(struct PageInfo* pp)
 {
@@ -327,7 +387,34 @@ pte_t *
 pgdir_walk(pde_t *pgdir, const void *va, int create)
 {
 	// Fill this function in
-	return NULL;
+	pte_t *pte;
+	if (pgdir[PDX(va)] & PTE_P) //PDX obtains page directory index of va
+						//PTE_ADDR obtains the address
+						//of the page
+						//KADDR obtains the kernel
+						//virtual address
+		pte = KADDR(PTE_ADDR(pgdir[PDX(va)])); 
+		
+	else{ //if create = FALSE or page_alloc does not "work"
+		struct PageInfo* page;
+		if (!create || !(page = page_alloc(ALLOC_ZERO)))
+			return NULL;
+			
+		else{ //create page
+			//on this position of the pgdir
+			//assign the physical page for page
+			//with the permissions it needs
+			
+			//page2pa returns physical adress 
+			
+			pgdir[PDX(va)] = page2pa(page) | PTE_P | PTE_W | PTE_U;
+			page->pp_ref++; //increase
+			pte = page2kva(page);
+		}
+	}
+	
+	//PTX obtains page table index of va
+	return pte + PTX(va); //page table entry pointer
 }
 
 //
@@ -341,10 +428,58 @@ pgdir_walk(pde_t *pgdir, const void *va, int create)
 // mapped pages.
 //
 // Hint: the TA solution uses pgdir_walk
+
 static void
 boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm)
 {
-	// Fill this function in
+#ifndef TP1_PSE
+	while (size >= PGSIZE){
+
+		// find pte
+		pte_t *pte = pgdir_walk(pgdir, (void *)va, 1);	
+		
+		//associate.
+		*pte = pa | perm | PTE_P;
+	
+		//go to next page
+		va += PGSIZE;
+		pa += PGSIZE;
+		size -= PGSIZE;
+	}
+		
+#else
+	while (size >= PGSIZE) {
+			
+		pde_t *pde = pgdir + PDX(va);
+
+		// Large page case
+		if ((size >= PTSIZE) && (pa == ROUNDUP(pa, PTSIZE))) {
+			*pde = pa | perm | PTE_P | PTE_PS;
+			
+			//go to next page
+			va += PTSIZE;
+			pa += PTSIZE;
+			size -= PTSIZE;
+		}
+		else {
+			// find pte
+			pte_t *pte = pgdir_walk(pgdir, (void *)va, 1);	
+	
+			/*if (!pte)
+				panic("boot_map_region: what?");
+			*/
+		
+			//associate.
+			*pte = pa | perm | PTE_P;
+	
+			//go to next page
+			va += PGSIZE;
+			pa += PGSIZE;
+			size -= PGSIZE;
+		}
+	}
+	
+#endif
 }
 
 //
@@ -375,8 +510,23 @@ boot_map_region(pde_t *pgdir, uintptr_t va, size_t size, physaddr_t pa, int perm
 int
 page_insert(pde_t *pgdir, struct PageInfo *pp, void *va, int perm)
 {
-	// Fill this function in
-	return 0;
+	pte_t *pte = pgdir_walk(pgdir,va,1);
+	
+	if (!pte)
+		return -E_NO_MEM; //page could not be allocated
+
+	
+	pp->pp_ref++; // increment	
+	
+	if (*pte & PTE_P){ //if present 
+		page_remove(pgdir,va); // remove the page already allocated
+	}
+		
+	//new permissions.
+	*pte = page2pa(pp)| perm | PTE_P;
+	
+	return 0; //return on success
+
 }
 
 //
@@ -394,7 +544,15 @@ struct PageInfo *
 page_lookup(pde_t *pgdir, void *va, pte_t **pte_store)
 {
 	// Fill this function in
-	return NULL;
+	pte_t *pte = pgdir_walk(pgdir, va, 0);
+	
+	if (!pte || !(*pte & PTE_P))
+		return NULL;
+		
+	if (pte_store)
+		*pte_store = pte;
+		
+	return pa2page(PTE_ADDR(*pte));
 }
 
 //
@@ -416,6 +574,23 @@ void
 page_remove(pde_t *pgdir, void *va)
 {
 	// Fill this function in
+	
+	pte_t *pte;
+	struct PageInfo *page = page_lookup(pgdir, va, &pte);
+
+	// Physical page not exist, so do nothing.
+	if (!pte || !(*pte & PTE_P))
+		return;
+
+	// Decrement reference count.
+	page_decref(page);
+
+	// PTE set to 0.
+	*pte = 0;
+
+	//TLB invalidation
+	tlb_invalidate(pgdir, va);
+	
 }
 
 //
@@ -621,6 +796,15 @@ check_kern_pgdir(void)
 		}
 	}
 	cprintf("check_kern_pgdir() succeeded!\n");
+	
+#if defined(TP1_PSE)  // Avoid literal “ifdef”, the grading script greps for it.
+	uint32_t kern_pdx = PDX(KERNBASE);
+	for (i = kern_pdx; i < NPDENTRIES; i++) {
+		assert(pgdir[i] & PTE_PS);
+		assert(PTE_ADDR(pgdir[i]) == (i - kern_pdx) << PDXSHIFT);
+	}
+	cprintf("check_kern_pgdir_pse() succeeded!\n");
+#endif
 }
 
 // This function returns the physical address of the page containing 'va',
@@ -839,3 +1023,7 @@ check_page_installed_pgdir(void)
 
 	cprintf("check_page_installed_pgdir() succeeded!\n");
 }
+
+
+
+
